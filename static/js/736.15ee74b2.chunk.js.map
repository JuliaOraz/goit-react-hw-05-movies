{"version":3,"file":"static/js/736.15ee74b2.chunk.js","mappings":"8UAGMA,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAA,+BAEO,IAAMC,EAAY,SAAAC,GACvB,OAAY,OAARA,EACKC,EAEH,kCAAN,OAAyCD,EAC1C,EAEYE,EAAiB,mCAAG,2GAAOC,EAAP,+BAAc,EAAd,SACRL,EAAAA,EAAAA,IAAA,uCACWD,EADX,iBAC2BM,IAFnB,uBACvBC,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,qDAOjBC,EAAe,mCAAG,WAAOC,GAAP,8FAAcH,EAAd,+BAAqB,EAArB,SACNL,EAAAA,EAAAA,IAAA,gCACID,EADJ,kBACqBS,EADrB,gCACkDH,EADlD,yBADM,uBACrBC,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,sDAOfG,EAAU,mCAAG,WAAMC,GAAN,yFACDV,EAAAA,EAAAA,IAAA,iBACXU,EADW,oBACSX,EADT,oBADC,uBAChBO,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,sDAOVK,EAAO,mCAAG,WAAMD,GAAN,yFACEV,EAAAA,EAAAA,IAAA,iBACXU,EADW,4BACiBX,EADjB,oBADF,uBACbO,EADa,EACbA,KADa,kBAKdA,GALc,2CAAH,sDAOPM,EAAU,mCAAG,WAAMF,GAAN,yFACDV,EAAAA,EAAAA,IAAA,iBACXU,EADW,4BACiBX,EADjB,2BADC,uBAChBO,EADgB,EAChBA,KADgB,kBAIjBA,GAJiB,2CAAH,qD,0ICxCVO,EAAUC,EAAAA,EAAAA,IAAH,gDAGPC,EAAWD,EAAAA,EAAAA,GAAH,6GAMRE,EAAWF,EAAAA,EAAAA,GAAH,oIAMRG,EAAUH,EAAAA,EAAAA,IAAH,sEAIPI,EAAWJ,EAAAA,EAAAA,GAAH,gDAGRK,EAAWL,EAAAA,EAAAA,EAAH,4CAGRM,EAAYN,EAAAA,EAAAA,EAAH,yF,SC0BtB,EAxCa,WACX,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAUA,IARAC,EAAAA,EAAAA,YAAU,WACR,KACEf,EAAAA,EAAAA,IAAQU,GAASM,MAAK,SAAArB,GAAI,OAAImB,EAAUnB,EAAKsB,KAAnB,GAG3B,CAFC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACR,IAEW,OAAXG,EAIJ,OACE,SAACX,EAAD,UACGW,EAAOQ,OAAS,GACf,SAACjB,EAAD,UACGS,EAAOS,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAC/BnC,GAAMD,EAAAA,EAAAA,IAAUmC,GACtB,OACE,UAACpB,EAAD,YACE,SAACC,EAAD,CAASqB,IAAKpC,EAAKqC,IAAKJ,KACxB,SAACjB,EAAD,UAAWiB,KACX,UAAChB,EAAD,YACE,sCADF,IACqBkB,OAJRH,EAQlB,OAGH,SAACd,EAAD,mDAIP,C","sources":["components/API.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nimport defaultImg from '../img/no_image.jpg';\n\nconst API_KEY = '2994e3a31c3cad99fd99bf3fe61d916f';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\n\nexport const getPoster = img => {\n  if (img === null) {\n    return defaultImg;\n  }\n  return `https://image.tmdb.org/t/p/w500${img}`;\n};\n\nexport const getTrendingMovies = async (page = 1) => {\n  const { data } = await axios.get(\n    `/trending/movie/week?api_key=${API_KEY}&page=${page}`\n  );\n  return data;\n};\n\nexport const getSearchMovies = async (query, page = 1) => {\n  const { data } = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=${page}&include_adult=false`\n  );\n  return data;\n};\n\nexport const getMovieId = async movie_id => {\n  const { data } = await axios.get(\n    `/movie/${movie_id}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const getCast = async movie_id => {\n  const { data } = await axios.get(\n    `/movie/${movie_id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\nexport const getReviews = async movie_id => {\n  const { data } = await axios.get(\n    `/movie/${movie_id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return data;\n};\n","import styled from '@emotion/styled';\n\nexport const CastBox = styled.div`\n  margin-bottom: 35px;\n`;\nexport const CastList = styled.ul`\n  display: flex;\n  margin-left: -10px;\n  margin-right: -10px;\n  flex-wrap: wrap;\n`;\nexport const CastItem = styled.li`\n  width: calc((100% - 5 * 20px) / 5);\n  margin-left: 10px;\n  margin-right: 10px;\n  margin-bottom: 20px;\n`;\nexport const CastImg = styled.img`\n  min-height: 360px;\n  margin-bottom: 10px;\n`;\nexport const CastName = styled.h3`\n  margin-bottom: 10px;\n`;\nexport const CastText = styled.p`\n  font-size: 16px;\n`;\nexport const CastEmpty = styled.p`\n  font-size: 20px;\n  font-weight: 600;\n  margin-bottom: 50px;\n`;\n","import { getCast, getPoster } from '../API';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  CastBox,\n  CastList,\n  CastItem,\n  CastImg,\n  CastName,\n  CastText,\n  CastEmpty,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState(null);\n\n  useEffect(() => {\n    try {\n      getCast(movieId).then(data => setActors(data.cast));\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId]);\n\n  if (actors === null) {\n    return;\n  }\n\n  return (\n    <CastBox>\n      {actors.length > 0 ? (\n        <CastList>\n          {actors.map(({ id, name, profile_path, character }) => {\n            const img = getPoster(profile_path);\n            return (\n              <CastItem key={id}>\n                <CastImg src={img} alt={name} />\n                <CastName>{name}</CastName>\n                <CastText>\n                  <b>Character:</b> {character}\n                </CastText>\n              </CastItem>\n            );\n          })}\n        </CastList>\n      ) : (\n        <CastEmpty>We don't have data about the actors</CastEmpty>\n      )}\n    </CastBox>\n  );\n};\n\nexport default Cast;\n"],"names":["API_KEY","axios","getPoster","img","defaultImg","getTrendingMovies","page","data","getSearchMovies","query","getMovieId","movie_id","getCast","getReviews","CastBox","styled","CastList","CastItem","CastImg","CastName","CastText","CastEmpty","movieId","useParams","useState","actors","setActors","useEffect","then","cast","error","console","log","length","map","id","name","profile_path","character","src","alt"],"sourceRoot":""}