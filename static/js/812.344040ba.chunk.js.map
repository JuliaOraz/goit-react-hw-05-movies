{"version":3,"file":"static/js/812.344040ba.chunk.js","mappings":"iOAGaA,EAAiBC,EAAAA,EAAAA,GAAH,qIAOdC,EAAYD,EAAAA,EAAAA,GAAH,uLAUTE,GAAYF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,iJASTI,EAAWJ,EAAAA,EAAAA,IAAH,oGAKRK,EAAaL,EAAAA,EAAAA,GAAH,oP,SCvBR,SAASM,EAAT,GAAgC,IAAXC,EAAU,EAAVA,OAC5BC,GAAWC,EAAAA,EAAAA,MAEXC,EAAYH,EAAOI,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MACzCC,GAAMC,EAAAA,EAAAA,IAAUH,GAEtB,OACE,SAACZ,EAAD,WACE,UAACC,EAAD,CAAWe,GAAE,kBAAaL,GAAMM,MAAO,CAAEC,KAAMX,GAA/C,WACE,SAACJ,EAAD,CAAUgB,IAAKL,EAAKM,IAAKP,KACzB,SAACT,EAAD,UAAaS,QAHDF,EAOnB,IAED,OAAO,SAACb,EAAD,UAAiBW,GACzB,C,sHC1BYY,E,OAAQtB,EAAAA,GAAH,uF,SCGH,SAASuB,IACtB,OAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACR,KACEC,EAAAA,EAAAA,MAAoBC,MAAK,gBAAGC,EAAH,EAAGA,QAAH,OAAiBJ,EAAgBI,EAAjC,GAG1B,CAFC,MAAOC,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,KAGD,kBAAMG,UAAU,YAAhB,WACE,SAACZ,EAAD,8BACA,SAAChB,EAAA,EAAD,CAAWC,OAAQkB,MAGxB,C,+NCjBDU,EAAAA,EAAAA,SAAAA,QAAA,+BACAA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAJc,mCAKdC,SAAU,SAGL,IAAMrB,EAAY,SAAAD,GACvB,OAAY,OAARA,EACKuB,EAEH,kCAAN,OAAyCvB,EAC1C,EAEYa,EAAiB,mCAAG,2GAAOW,EAAP,+BAAc,EAAd,SACRJ,EAAAA,EAAAA,IAAA,oCAAuCI,IAD/B,uBACvBC,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjBC,EAAe,mCAAG,WAAOC,GAAP,8FAAcH,EAAd,+BAAqB,EAArB,SACNJ,EAAAA,EAAAA,IAAA,8BACEO,EADF,iBACgBH,EADhB,yBADM,uBACrBC,EADqB,EACrBA,KADqB,kBAItBA,GAJsB,2CAAH,sDAOfG,EAAU,mCAAG,WAAMC,GAAN,yFACDT,EAAAA,EAAAA,IAAA,iBAAoBS,IADnB,uBAChBJ,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,sDAKVK,EAAO,mCAAG,WAAMD,GAAN,yFACET,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,aADF,uBACbJ,EADa,EACbA,KADa,kBAGdA,GAHc,2CAAH,sDAKPM,EAAU,mCAAG,WAAMF,GAAN,yFACDT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,oBADC,uBAChBJ,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,qD","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","pages/HomePage/HomePage.styled.jsx","pages/HomePage/HomePage.jsx","services/API.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const MovieContainer = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: -10px;\n  margin-right: -10px;\n  margin-bottom: 50px;\n`;\nexport const MovieItem = styled.li`\n  margin-left: 10px;\n  margin-right: 10px;\n  margin-top: 20px;\n  width: calc((100% - 3 * 20px) / 3);\n\n  &:nth-of-type(-n + 3) {\n    margin-top: 0;\n  }\n`;\nexport const MovieLink = styled(Link)`\n  display: block;\n  text-decoration: none;\n  border: 1px solid #ededed;\n\n  &:hover > h2 {\n    color: #5ac8fa;\n  }\n`;\nexport const MovieImg = styled.img`\n  background-color: #ededed;\n  min-height: 610px;\n  margin-bottom: 15px;\n`;\nexport const MovieTitle = styled.h2`\n  font-size: 22px;\n  color: #000;\n  margin-bottom: 15px;\n  padding: 0 15px;\n  transition: color 250ms linear;\n  display: -webkit-box;\n  -webkit-line-clamp: 1;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { getPoster } from '../../services/API';\nimport {\n  MovieContainer,\n  MovieItem,\n  MovieLink,\n  MovieImg,\n  MovieTitle,\n} from './MovieList.styled';\n\nexport default function MovieList({ movies }) {\n  const location = useLocation();\n\n  const movieItem = movies.map(({ id, poster_path, title }) => {\n    const img = getPoster(poster_path);\n\n    return (\n      <MovieItem key={id}>\n        <MovieLink to={`/movies/${id}`} state={{ from: location }}>\n          <MovieImg src={img} alt={title} />\n          <MovieTitle>{title}</MovieTitle>\n        </MovieLink>\n      </MovieItem>\n    );\n  });\n\n  return <MovieContainer>{movieItem}</MovieContainer>;\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h1`\n  text-align: center;\n  color: #000;\n  margin-bottom: 50px;\n`;\n","import { getTrendingMovies } from '../../services/API';\nimport { useState, useEffect } from 'react';\nimport MovieList from '../../components/MovieList/MovieList';\nimport { Title } from './HomePage.styled';\n\nexport default function HomePage() {\n  const [popularMovie, setPopularMovie] = useState([]);\n\n  useEffect(() => {\n    try {\n      getTrendingMovies().then(({ results }) => setPopularMovie(results));\n    } catch (error) {\n      console.log(error);\n    }\n  }, []);\n\n  return (\n    <main className=\"container\">\n      <Title>Trending today</Title>\n      <MovieList movies={popularMovie} />\n    </main>\n  );\n}\n","import axios from 'axios';\nimport defaultImg from '../img/no_image.jpg';\n\nconst API_KEY = '2994e3a31c3cad99fd99bf3fe61d916f';\n\naxios.defaults.baseURL = `https://api.themoviedb.org/3`;\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en-US',\n};\n\nexport const getPoster = img => {\n  if (img === null) {\n    return defaultImg;\n  }\n  return `https://image.tmdb.org/t/p/w500${img}`;\n};\n\nexport const getTrendingMovies = async (page = 1) => {\n  const { data } = await axios.get(`/trending/movie/week?page=${page}`);\n  return data;\n};\n\nexport const getSearchMovies = async (query, page = 1) => {\n  const { data } = await axios.get(\n    `/search/movie?query=${query}&page=${page}&include_adult=false`\n  );\n  return data;\n};\n\nexport const getMovieId = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}`);\n  return data;\n};\n\nexport const getCast = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}/credits`);\n\n  return data;\n};\nexport const getReviews = async movie_id => {\n  const { data } = await axios.get(`/movie/${movie_id}/reviews?page=1`);\n  return data;\n};\n"],"names":["MovieContainer","styled","MovieItem","MovieLink","Link","MovieImg","MovieTitle","MovieList","movies","location","useLocation","movieItem","map","id","poster_path","title","img","getPoster","to","state","from","src","alt","Title","HomePage","useState","popularMovie","setPopularMovie","useEffect","getTrendingMovies","then","results","error","console","log","className","axios","api_key","language","defaultImg","page","data","getSearchMovies","query","getMovieId","movie_id","getCast","getReviews"],"sourceRoot":""}